@page "/"
@page "/{BoardName}"

@using YATM.BlazorModels.Boards;
@using YATM.Models.Constants;
@using YATM.Pages.Index.Components
@using YATM.Services;

@attribute [Authorize]

@inject DatabaseFactory dbFactory

<PageTitle>@ActiveBoard?.Name</PageTitle>

@if (ActiveBoard is null)
{
    <Spin Size="Large" />
}
else
{
    <Table TItem="BoardColumnBlazorModel" DataSource="ActiveBoard.Columns" HidePagination="true" Class="board-table">
@*        @foreach (var column in ActiveBoard.Columns)
        {*@
            <Column @bind-Field="Ac.Tasks" Title="@column.Name">
                @*@foreach (var task in column.Tasks) 
                {
                    <TaskTableItem Task="task" ItemChangedCallback="GetItemsAsync" />
                }*@
            </Column>
@*        }*@
    </Table>
}

@code {
    [Parameter]
    public string? BoardName { get; set; }

    public List<BoardBlazorModel> Boards { get; set; } = new();
    public BoardBlazorModel ActiveBoard { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetItemsAsync();

        await base.OnInitializedAsync();
    }

    private async Task GetItemsAsync()
    {
        using var db = dbFactory.Create();
        var boardService = db.GetService<BoardService>();

        Boards = await boardService.GetBoardBlazorModelsAsync();
        ActiveBoard = await boardService.GetBoardBlazorModelByNameAsync(BoardName ?? BoardConstants.MainBoard);
    }
}