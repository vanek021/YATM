@page "/"
@page "/{BoardName}"

@using YATM.BlazorModels.Boards;
@using YATM.Models.Constants;
@using YATM.Pages.Index.Components
@using YATM.Services;

@attribute [Authorize]

@inject DatabaseFactory dbFactory

<PageTitle>@ActiveBoard?.Name</PageTitle>

@if (ActiveBoard is null)
{
    <Spin Size="Large" />
}
else
{
    <TaskCreateEditModal @ref="_taskCreateEditModal" Task="_createEditTaskModel" Columns="ActiveBoard.Columns" OnOK="GetItemsAsync" />
    <h1>@ActiveBoard.Name</h1>
    <table class="table board-table">
        <thead>
            <tr>
                @foreach (var col in ActiveBoard.Columns)
                {
                    <th scope="col">@col.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var col in ActiveBoard.Columns)
                {
                    <td scope="row">
                        @foreach (var task in col.Tasks)
                        {
                            <div class="board-task">
                                <div class="board-task__name" @ondblclick="@(_ => OpenTaskEditModal(task))">
                                    <span class="board-task__task-id">@task.Id</span> @task.Name
                                </div>
                            </div>
                        }
                        <div class="board-task__create">
                            <Button OnClick="OpenTaskCreateModal">Создать..</Button>
                        </div>
                    </td>
                }
            </tr>
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string? BoardName { get; set; }

    public List<BoardBlazorModel> Boards { get; set; } = new();
    public BoardBlazorModel ActiveBoard { get; set; }

    private TaskCreateEditModal? _taskCreateEditModal;
    private BoardTaskBlazorModel? _createEditTaskModel;

    protected override async Task OnInitializedAsync()
    {
        await GetItemsAsync();

        await base.OnInitializedAsync();
    }

    private async Task GetItemsAsync()
    {
        using var db = dbFactory.Create();
        var boardService = db.GetService<BoardService>();

        Boards = await boardService.GetBoardBlazorModelsAsync();
        ActiveBoard = await boardService.GetBoardBlazorModelByNameAsync(BoardName ?? BoardConstants.MainBoard);
    }

    private void OpenTaskEditModal(BoardTaskBlazorModel task)
    {
        _createEditTaskModel = task;
        _taskCreateEditModal!.OpenModal();
    }

    private void OpenTaskCreateModal()
    {
        _createEditTaskModel = new BoardTaskBlazorModel()
            {
                BoardColumnId = ActiveBoard.Columns.OrderBy(c => c.Order).First().Id
            };

        _taskCreateEditModal!.OpenModal();
    }
}