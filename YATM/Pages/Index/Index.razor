@page "/"

@using YATM.BlazorModels.Boards;
@using YATM.Factories;
@using YATM.Models.Constants;
@using YATM.Services;

@attribute [Authorize]

@inject DatabaseFactory dbFactory

<PageTitle>@ActiveBoard?.Name</PageTitle>

@if (ActiveBoard is null)
{
    <Spin Size="Large" />
}
else
{
    <table class="table">
        <thead>
            <tr>
                @foreach (var column in ActiveBoard.Columns)
                {
                    <th>@column.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var column in ActiveBoard.Columns)
                {
                    <td>
                        <Button>Новая карточка</Button>
                    </td>
                }
            </tr>
            <tr>
                @foreach (var column in ActiveBoard.Columns)
                {
                    <td>
                        @foreach (var task in column.Tasks)
                        {
                            <div>@task.Name</div>
                        }
                    </td>
                }
            </tr>
        </tbody>
    </table>
}

@code {
    public List<BoardBlazorModel> Boards { get; set; } = new();
    public BoardBlazorModel ActiveBoard { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var db = dbFactory.Create();
        var boardService = db.GetService<BoardService>();

        Boards = await boardService.GetBoardBlazorModelsAsync();
        ActiveBoard = await boardService.GetBoardBlazorModelByNameAsync(BoardConstants.MainBoard);

        await base.OnInitializedAsync();
    }
}