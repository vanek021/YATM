@page "/"
@page "/{BoardName}"

@using YATM.BlazorModels.Boards;
@using YATM.Models.Constants;
@using YATM.Pages.Index.Components
@using YATM.Services;

@attribute [Authorize]

@inject DatabaseFactory dbFactory

<PageTitle>@_activeBoard?.Name</PageTitle>

@if (_activeBoard is null)
{
    <Spin Size="Large" />
}
else
{
    <TaskCreateEditModal @ref="_taskCreateEditModal" Task="_createEditTask" Columns="_activeBoard.Columns" OnOK="GetItemsAsync" />
    <BoardCreateEditModal @ref="_boardCreateEditModal" Board="_createEditBoard" OnOK="OnBoardCreateEdit" />
    <h1>@_activeBoard.Name</h1>
    <Flex Gap="small" Style="padding-bottom: 10px;">
        <div>
            <Button OnClick="OpenBoardCreateModal" Icon="@IconType.Outline.Plus">
                Создать доску
            </Button>
        </div>
        <div class="board-select">
            <Select @bind-Value="_activeBoardId"
                    TItem="BoardShortBlazorModel"
                    TItemValue="long?"
                    LabelName="@nameof(BoardShortBlazorModel.Name)"
                    ValueName="@nameof(BoardShortBlazorModel.Id)"
                    OnSelectedItemChanged="GetItemsAsync"
                    DataSource="_boards" />
        </div>
    </Flex>
    <table class="table board-table">
        <thead>
            <tr>
                @foreach (var col in _activeBoard.Columns)
                {
                    <th scope="col">@col.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var col in _activeBoard.Columns)
                {
                    <td scope="row">
                        @foreach (var task in col.Tasks)
                        {
                            <div class="board-task">
                                <div class="board-task__name" @ondblclick="@(_ => OpenTaskEditModal(task))">
                                    <span class="board-task__task-id">@task.Id</span> @task.Name
                                </div>
                            </div>
                        }
                        <div class="board-task__create">
                            <Button OnClick="OpenTaskCreateModal">Создать..</Button>
                        </div>
                    </td>
                }
            </tr>
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string? BoardName { get; set; }

    private List<BoardShortBlazorModel> _boards { get; set; } = new();
    private long? _activeBoardId;
    private BoardBlazorModel _activeBoard { get; set; }
    private TaskCreateEditModal? _taskCreateEditModal;
    private BoardTaskBlazorModel? _createEditTask;
    private BoardBlazorModel? _createEditBoard;
    private BoardCreateEditModal? _boardCreateEditModal;

    protected override async Task OnInitializedAsync()
    {
        await GetBoardsAsync();
        await GetItemsAsync();

        await base.OnInitializedAsync();
    }

    private async Task GetBoardsAsync()
    {
        using var db = dbFactory.Create();
        var boardService = db.GetService<BoardService>();
        var appCtx = db.GetService<ApplicationContext>();

        _boards = await boardService.GetBoardBlazorModelsAsync(appCtx.CurrentUser.Id);
    }

    private async Task GetItemsAsync()
    {
        using var db = dbFactory.Create();
        var boardService = db.GetService<BoardService>();
        var appCtx = db.GetService<ApplicationContext>();

        _activeBoard = await boardService.GetBoardBlazorModelByIdOrDefaultAsync(_activeBoardId, appCtx.CurrentUser.Id);

        if (_activeBoard != null && _activeBoardId is null)
            _activeBoardId = _activeBoard.Id;
    }

    private void OpenTaskEditModal(BoardTaskBlazorModel task)
    {
        _createEditTask = task;
        _taskCreateEditModal!.OpenModal();
    }

    private void OpenTaskCreateModal()
    {
        _createEditTask = new BoardTaskBlazorModel()
            {
                BoardColumnId = _activeBoard.Columns.OrderBy(c => c.Order).First().Id
            };

        _taskCreateEditModal!.OpenModal();
    }

    private void OpenBoardCreateModal()
    {
        _createEditBoard = new BoardBlazorModel();
        _boardCreateEditModal!.OpenModal();
    }

    private async Task OnBoardCreateEdit()
    {
        _activeBoardId = _createEditBoard!.Id;
        await GetBoardsAsync();
        await GetItemsAsync();
    }
}