@page "/notes"

@using YATM.BlazorModels.Notes;
@using YATM.Components.Shared;
@using YATM.Models.Constants;
@using YATM.Pages.Index.Components;
@using YATM.Pages.Notes.Components;
@using YATM.Services;

@attribute [Authorize]

@inject DatabaseFactory dbFactory

<PageTitle>Заметки</PageTitle>

<NoteCreateEditModal @ref="noteCreateEditModal" Note="noteCreateEdit" OKCallback="OnModalConfirmAsync" />
<ConfirmationModal @ref="deleteConfirmation" OnCancel="CancelDeleting" OnConfirm="@(_ => OnDeleteConfirmedAsync(deleteDraft!.Id))">
    <div>Удалить заметку "@deleteDraft?.Title"?</div>
</ConfirmationModal>
<Flex Style="padding-bottom: 10px;">
    <div>
        <Button OnClick="OnCreateClickAsync" Icon="@IconType.Outline.Plus">
            Создать
        </Button>
    </div>
</Flex>
<Flex Justify="space-evenly" Wrap="wrap">
    @foreach (var note in Notes)
    {
        <div style="width: 400px; min-height: 300px; margin:10px;">
            <Card Title="@note.Title">
                <Extra>
                    <Button Icon="@IconType.Outline.Delete" @onclick=@(_ => OnShowDeleteConfirmation(note)) />
                    <Button Icon="@IconType.Outline.Edit" @onclick=@(_ => OnEditClickAsync(note.Id)) />
                    @if (note.IsPinned)
                    {
                        <Button Class="ant-btn-icon-only anticon anticon-edit" @onclick=@(_ => OnPinClickAsync(note)) NoSpanWrap>
                        <Icon Type="pushpin" Theme="fill" />
                    </Button>
                    }
                    else
                    {
                        <Button Class="ant-btn-icon-only" @onclick=@(_ => OnPinClickAsync(note)) NoSpanWrap>
                        <Icon Type="pushpin" Theme="outline" Class="anticon anticon-pushpin" />
                    </Button>
                    }
                </Extra>
                <Body>
                    @((MarkupString)note.Content)
                </Body>
            </Card>
        </div>
    }
</Flex>

@code {
    public List<NoteBlazorModel> Notes { get; set; } = new();

    private NoteBlazorModel noteCreateEdit;
    private NoteBlazorModel? deleteDraft;
    private NoteCreateEditModal noteCreateEditModal;
    private ConfirmationModal? deleteConfirmation;

    protected override async Task OnInitializedAsync()
    {
        await GetItemsAsync();

        await base.OnInitializedAsync();
    }

    private void CancelDeleting()
    {
        deleteConfirmation?.Hide();
        deleteDraft = null;
    }

    private async Task GetItemsAsync()
    {
        using var db = dbFactory.Create();
        var noteService = db.GetService<NoteService>();
        var appCtx = db.GetService<ApplicationContext>();
        Notes = await noteService.GetNoteBlazorModelsByUserAsync(appCtx.CurrentUser);
    }

    private async Task OnCreateClickAsync()
    {
        noteCreateEdit = new();
        noteCreateEditModal.OpenModal();
    }

    private async Task OnEditClickAsync(long id)
    {
        noteCreateEdit = Notes.First(n => n.Id == id);
        noteCreateEditModal.OpenModal();
    }

    private async Task OnPinClickAsync(NoteBlazorModel model)
    {
        model.IsPinned = !model.IsPinned;

        using var db = dbFactory.Create();
        var noteService = db.GetService<NoteService>();
        await noteService.PinNoteAsync(model);

        await GetItemsAsync();
        StateHasChanged();
    }

    private void OnShowDeleteConfirmation(NoteBlazorModel model)
    {
        deleteDraft = model;
        deleteConfirmation?.Show();
    }

    private async Task OnDeleteConfirmedAsync(long id)
    {
        deleteConfirmation?.Hide();

        if (deleteDraft == null)
            return;

        using var db = dbFactory.Create();
        var noteService = db.GetService<NoteService>();
        await noteService.DeleteNoteAsync(id);

        await GetItemsAsync();
        StateHasChanged();
    }

    private async Task OnModalConfirmAsync()
    {
        using var db = dbFactory.Create();
        var noteService = db.GetService<NoteService>();

        if (noteCreateEdit.Id == default)
            await noteService.CreateNoteAsync(noteCreateEdit);
        else
            await noteService.UpdateNoteAsync(noteCreateEdit);

        await GetItemsAsync();
        StateHasChanged();
    }
}
