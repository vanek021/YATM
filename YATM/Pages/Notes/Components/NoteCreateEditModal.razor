@using YATM.BlazorModels.Notes
@using YATM.BlazorModels.Notes.NoteTags
@using YATM.Services

@inject DatabaseFactory dbFactory

<Modal Visible="visible" Closable="false" Centered="true" OnOk="OnOK" OnCancel="OnCancel" Title="@Note?.Title">
    <Form Model="Note" @ref="form">
        <FormItem>
            <Input Placeholder="Заголовок" @bind-Value="@Note!.Title" />
        </FormItem>
        <FormItem>
            <NoteTagSelect @ref="noteTagSelect" OnSelectedItemsChanged="OnSelectedTagsChanged" />
        </FormItem>
        <FormItem>
            <TinyMCE.Blazor.Editor ApiKey="8x4if75v87gl8oelediq72dnb2yomjxelaonbn6p2nyictgk"
                                   Field="() => Note!.Content"
                                   @bind-Value="Note!.Content" />
        </FormItem>
    </Form>
</Modal>

@code {
    [Parameter]
    public NoteBlazorModel? Note { get; set; } = new();

    [Parameter]
    public EventCallback OKCallback { get; set; }

    private NoteTagSelect? noteTagSelect;
    private Form<NoteBlazorModel?>? form;
    private IEnumerable<long>? initTags;
    private bool needSetTags = false;
    private bool visible = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (needSetTags)
        {
            if (noteTagSelect != null)
            {
                await noteTagSelect!.InitTagsAsync(initTags!);
                needSetTags = false;
                initTags = null;
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void OpenModal()
    {
        visible = true;

        StateHasChanged();
    }

    public void InitTags(IEnumerable<long> tagsIds)
    {
        initTags = tagsIds;
        needSetTags = true;
    }

    private void OnOK()
    {
        var isValid = form!.Validate();
        if (isValid)
        {
            OKCallback.InvokeAsync();
            visible = false;
        }
    }

    private void OnCancel()
    {
        visible = false;
    }

    private void OnSelectedTagsChanged(IEnumerable<NoteTagBlazorModel> values)
    {
        if (values != null && values.Any())
        {
            Note!.NoteTags = values.ToList();
        }
        else
        {
            Note!.NoteTags = new();
        }
    }
}
